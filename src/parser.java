
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.util.Deque;
import java.util.ArrayDeque;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\007\000\002\017" +
    "\004\000\002\017\002\000\002\023\002\000\002\024\002" +
    "\000\002\016\014\000\002\003\004\000\002\003\002\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\021\003\000\002\021\003" +
    "\000\002\006\005\000\002\006\007\000\002\006\005\000" +
    "\002\022\006\000\002\005\006\000\002\005\011\000\002" +
    "\011\005\000\002\007\005\000\002\007\005\000\002\010" +
    "\005\000\002\010\005\000\002\025\002\000\002\012\011" +
    "\000\002\026\002\000\002\013\005\000\002\013\002\000" +
    "\002\027\002\000\002\014\016\000\002\030\002\000\002" +
    "\015\010\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\004\000\002\020\004\000\002\020\005\000\002" +
    "\020\006\000\002\020\003\000\002\020\003\000\002\020" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\017\ufffe\050\ufffe\001\002\000\004\002" +
    "\175\001\002\000\006\017\007\050\006\001\002\000\006" +
    "\025\026\026\014\001\002\000\004\020\011\001\002\000" +
    "\006\017\uffff\050\uffff\001\002\000\026\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\033\ufff9\040\ufff9\046" +
    "\ufff9\052\ufff9\001\002\000\026\021\031\022\013\023\025" +
    "\024\021\025\026\026\014\033\030\040\022\046\036\052" +
    "\023\001\002\000\016\005\043\010\044\032\040\052\037" +
    "\053\041\054\042\001\002\000\004\052\uffef\001\002\000" +
    "\036\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\033\ufff1\035\ufff1\036\ufff1\040\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\052\ufff1\001\002\000\004\052\150\001\002\000\036" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\040\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\052\ufffa\001\002\000\036\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\033\ufff4\035\ufff4\036\ufff4\040\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\052\ufff4\001\002\000\020\005" +
    "\043\010\044\032\040\052\037\053\041\054\042\055\144" +
    "\001\002\000\004\052\131\001\002\000\006\012\121\037" +
    "\120\001\002\000\036\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\033\ufff8\035\ufff8\036\ufff8\040\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\052\ufff8\001\002\000\020\005\043" +
    "\010\044\032\040\052\037\053\041\054\042\055\114\001" +
    "\002\000\004\052\ufff0\001\002\000\036\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\033\ufff7\035\ufff7\036" +
    "\ufff7\040\ufff7\045\ufff7\046\ufff7\047\ufff7\052\ufff7\001\002" +
    "\000\016\005\043\010\044\032\040\052\037\053\041\054" +
    "\042\001\002\000\004\002\000\001\002\000\036\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\033\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\045\ufff3\046\ufff3\047\ufff3\052\ufff3" +
    "\001\002\000\036\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\033\ufff6\035\ufff6\036\ufff6\040\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\052\ufff6\001\002\000\036\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\033\ufff2\035\ufff2" +
    "\036\ufff2\040\ufff2\045\ufff2\046\ufff2\047\ufff2\052\ufff2\001" +
    "\002\000\036\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\033\ufff5\035\ufff5\036\ufff5\040\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\052\ufff5\001\002\000\016\005\043\010\044" +
    "\032\040\052\037\053\041\054\042\001\002\000\044\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\100\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\027\uffcd\030\uffcd\031\uffcd\034" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002\000\016\005\043" +
    "\010\044\032\040\052\037\053\041\054\042\001\002\000" +
    "\042\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\027\uffcc\030\uffcc\031\uffcc\034" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\001\002\000\042\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\027\uffcb\030\uffcb\031\uffcb\034\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\001\002\000\016\005\043\010\044\032" +
    "\040\052\037\053\041\054\042\001\002\000\016\005\043" +
    "\010\044\032\040\052\037\053\041\054\042\001\002\000" +
    "\026\004\051\005\046\006\054\007\047\014\056\015\050" +
    "\016\052\030\057\031\055\044\053\001\002\000\016\005" +
    "\043\010\044\032\040\052\037\053\041\054\042\001\002" +
    "\000\016\005\043\010\044\032\040\052\037\053\041\054" +
    "\042\001\002\000\016\005\043\010\044\032\040\052\037" +
    "\053\041\054\042\001\002\000\016\005\043\010\044\032" +
    "\040\052\037\053\041\054\042\001\002\000\016\005\043" +
    "\010\044\032\040\052\037\053\041\054\042\001\002\000" +
    "\026\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\033\uffdc" +
    "\040\uffdc\046\uffdc\047\uffdc\052\uffdc\001\002\000\016\005" +
    "\043\010\044\032\040\052\037\053\041\054\042\001\002" +
    "\000\016\005\043\010\044\032\040\052\037\053\041\054" +
    "\042\001\002\000\016\005\043\010\044\032\040\052\037" +
    "\053\041\054\042\001\002\000\016\005\043\010\044\032" +
    "\040\052\037\053\041\054\042\001\002\000\042\004\051" +
    "\005\046\006\054\007\047\011\uffd3\013\uffd3\014\056\015" +
    "\050\016\052\027\uffd3\030\uffd3\031\uffd3\034\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\001\002\000\034\004\051\005\046\006" +
    "\054\007\047\011\uffd6\013\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\034\uffd6\042\uffd6\043\uffd6\044\uffd6\001\002\000\042\004" +
    "\051\005\046\006\054\007\047\011\uffd2\013\uffd2\014\056" +
    "\015\050\016\052\027\uffd2\030\uffd2\031\uffd2\034\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\001\002\000\042\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\034\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\001\002\000\026\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\033\ufff9\040\ufff9\046\ufff9\047\ufff9\052\ufff9" +
    "\001\002\000\026\022\013\023\025\024\021\025\026\026" +
    "\014\033\030\040\022\046\036\047\066\052\023\001\002" +
    "\000\036\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\033\uffdb\035\uffdb\036\uffdb\040\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\052\uffdb\001\002\000\034\004\051\005\046\006" +
    "\054\007\047\011\uffd4\013\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\034\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002\000\042\004" +
    "\uffda\005\uffda\006\054\007\047\011\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\027\uffda\030\uffda\031\uffda\034\uffda\042" +
    "\uffda\043\uffda\044\uffda\001\002\000\034\004\051\005\046" +
    "\006\054\007\047\011\uffd5\013\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\034\uffd5\042\uffd5\043\uffd5\044\uffd5\001\002\000\042" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\027\uffd7\030\uffd7\031\uffd7\034\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\001\002\000\042\004\uffd9\005" +
    "\uffd9\006\054\007\047\011\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\027\uffd9\030\uffd9\031\uffd9\034\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\001\002\000\026\004\051\005\046\006\054" +
    "\007\047\011\075\014\056\015\050\016\052\030\057\031" +
    "\055\001\002\000\042\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\034\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002" +
    "\000\042\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\034\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\042\004" +
    "\051\005\046\006\054\007\047\011\uffd1\013\uffd1\014\056" +
    "\015\050\016\052\027\uffd1\030\uffd1\031\uffd1\034\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\001\002\000\016\005\043\010\044" +
    "\032\040\052\037\053\041\054\042\001\002\000\026\004" +
    "\051\005\046\006\054\007\047\013\102\014\056\015\050" +
    "\016\052\030\057\031\055\001\002\000\042\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\027\uffce\030\uffce\031\uffce\034\uffce\042\uffce\043" +
    "\uffce\044\uffce\001\002\000\026\004\051\005\046\006\054" +
    "\007\047\014\056\015\050\016\052\030\057\031\055\034" +
    "\104\001\002\000\030\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\033\uffe3\035\uffe3\036\uffe3\040\uffe3\046\uffe3\052" +
    "\uffe3\001\002\000\030\022\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\033\ufff9\035\ufff9\036\ufff9\040\ufff9\046\ufff9\052" +
    "\ufff9\001\002\000\030\022\013\023\025\024\021\025\026" +
    "\026\014\033\030\035\110\036\uffdf\040\022\046\036\052" +
    "\023\001\002\000\004\036\113\001\002\000\026\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\033\uffe1\036\uffe1\040" +
    "\uffe1\046\uffe1\052\uffe1\001\002\000\026\022\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\033\ufff9\036\ufff9\040\ufff9\046" +
    "\ufff9\052\ufff9\001\002\000\026\022\013\023\025\024\021" +
    "\025\026\026\014\033\030\036\uffe0\040\022\046\036\052" +
    "\023\001\002\000\036\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\033\uffe2\035\uffe2\036\uffe2\040\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\052\uffe2\001\002\000\004\027\117" +
    "\001\002\000\026\004\051\005\046\006\054\007\047\014" +
    "\056\015\050\016\052\027\116\030\057\031\055\001\002" +
    "\000\036\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\033\uffe7\035\uffe7\036\uffe7\040\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\052\uffe7\001\002\000\036\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\033\uffe6\035\uffe6\036\uffe6" +
    "\040\uffe6\045\uffe6\046\uffe6\047\uffe6\052\uffe6\001\002\000" +
    "\016\005\043\010\044\032\040\052\037\053\041\054\042" +
    "\001\002\000\016\005\043\010\044\032\040\052\037\053" +
    "\041\054\042\001\002\000\026\004\051\005\046\006\054" +
    "\007\047\013\123\014\056\015\050\016\052\030\057\031" +
    "\055\001\002\000\004\037\124\001\002\000\016\005\043" +
    "\010\044\032\040\052\037\053\041\054\042\001\002\000" +
    "\026\004\051\005\046\006\054\007\047\014\056\015\050" +
    "\016\052\027\126\030\057\031\055\001\002\000\036\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\033\uffe9" +
    "\035\uffe9\036\uffe9\040\uffe9\045\uffe9\046\uffe9\047\uffe9\052" +
    "\uffe9\001\002\000\026\004\051\005\046\006\054\007\047" +
    "\014\056\015\050\016\052\027\130\030\057\031\055\001" +
    "\002\000\036\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\033\uffea\035\uffea\036\uffea\040\uffea\045\uffea\046" +
    "\uffea\047\uffea\052\uffea\001\002\000\004\041\132\001\002" +
    "\000\016\005\043\010\044\032\040\052\037\053\041\054" +
    "\042\001\002\000\026\004\051\005\046\006\054\007\047" +
    "\014\056\015\050\016\052\030\057\031\055\042\134\001" +
    "\002\000\016\005\043\010\044\032\040\052\037\053\041" +
    "\054\042\001\002\000\026\004\051\005\046\006\054\007" +
    "\047\014\056\015\050\016\052\030\057\031\055\043\136" +
    "\001\002\000\016\005\043\010\044\032\040\052\037\053" +
    "\041\054\042\001\002\000\026\004\051\005\046\006\054" +
    "\007\047\014\056\015\050\016\052\030\057\031\055\044" +
    "\140\001\002\000\026\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\033\uffde\040\uffde\045\uffde\046\uffde\052\uffde\001" +
    "\002\000\026\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\033\ufff9\040\ufff9\045\ufff9\046\ufff9\052\ufff9\001\002\000" +
    "\026\022\013\023\025\024\021\025\026\026\014\033\030" +
    "\040\022\045\143\046\036\052\023\001\002\000\036\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\033\uffdd" +
    "\035\uffdd\036\uffdd\040\uffdd\045\uffdd\046\uffdd\047\uffdd\052" +
    "\uffdd\001\002\000\004\027\147\001\002\000\026\004\051" +
    "\005\046\006\054\007\047\014\056\015\050\016\052\027" +
    "\146\030\057\031\055\001\002\000\036\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\033\uffe5\035\uffe5\036" +
    "\uffe5\040\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5\001\002" +
    "\000\036\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\052\uffe4\001\002\000\010\012\154\027\155\037" +
    "\153\001\002\000\004\027\152\001\002\000\036\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\033\uffec\035" +
    "\uffec\036\uffec\040\uffec\045\uffec\046\uffec\047\uffec\052\uffec" +
    "\001\002\000\016\005\043\010\044\032\040\052\037\053" +
    "\041\054\042\001\002\000\016\005\043\010\044\032\040" +
    "\052\037\053\041\054\042\001\002\000\036\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\033\uffee\035\uffee" +
    "\036\uffee\040\uffee\045\uffee\046\uffee\047\uffee\052\uffee\001" +
    "\002\000\026\004\051\005\046\006\054\007\047\013\157" +
    "\014\056\015\050\016\052\030\057\031\055\001\002\000" +
    "\004\027\uffeb\001\002\000\026\004\051\005\046\006\054" +
    "\007\047\014\056\015\050\016\052\027\161\030\057\031" +
    "\055\001\002\000\036\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\033\uffed\035\uffed\036\uffed\040\uffed\045" +
    "\uffed\046\uffed\047\uffed\052\uffed\001\002\000\026\004\051" +
    "\005\046\006\054\007\047\014\056\015\050\016\052\027" +
    "\163\030\057\031\055\001\002\000\036\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\033\uffe8\035\uffe8\036" +
    "\uffe8\040\uffe8\045\uffe8\046\uffe8\047\uffe8\052\uffe8\001\002" +
    "\000\004\052\165\001\002\000\004\010\166\001\002\000" +
    "\004\011\167\001\002\000\004\020\ufffd\001\002\000\004" +
    "\020\171\001\002\000\026\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\033\ufffc\040\ufffc\046\ufffc\052\ufffc" +
    "\001\002\000\026\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\033\ufff9\040\ufff9\046\ufff9\052\ufff9\001\002" +
    "\000\026\021\174\022\013\023\025\024\021\025\026\026" +
    "\014\033\030\040\022\046\036\052\023\001\002\000\006" +
    "\017\ufffb\050\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\002\003\017\004\001\001\000\002\001" +
    "\001\000\004\016\007\001\001\000\004\021\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\011\001" +
    "\001\000\026\004\016\005\026\006\023\007\034\010\017" +
    "\011\032\012\031\014\033\015\014\021\015\001\001\000" +
    "\004\020\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\044\001\001" +
    "\000\002\001\001\000\004\020\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\075\001\001\000\004" +
    "\020\073\001\001\000\002\001\001\000\004\020\072\001" +
    "\001\000\004\020\071\001\001\000\004\020\070\001\001" +
    "\000\004\020\067\001\001\000\004\020\066\001\001\000" +
    "\004\030\063\001\001\000\004\020\062\001\001\000\004" +
    "\020\061\001\001\000\004\020\060\001\001\000\004\020" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\064\001\001\000" +
    "\026\004\016\005\026\006\023\007\034\010\017\011\032" +
    "\012\031\014\033\015\014\021\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\104\001\001\000\004\003\105" +
    "\001\001\000\030\004\016\005\026\006\023\007\034\010" +
    "\017\011\032\012\031\013\106\014\033\015\014\021\015" +
    "\001\001\000\002\001\001\000\004\026\110\001\001\000" +
    "\004\003\111\001\001\000\026\004\016\005\026\006\023" +
    "\007\034\010\017\011\032\012\031\014\033\015\014\021" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\126\001\001\000\004\020\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\132\001\001\000\002\001" +
    "\001\000\004\020\134\001\001\000\002\001\001\000\004" +
    "\020\136\001\001\000\002\001\001\000\004\027\140\001" +
    "\001\000\004\003\141\001\001\000\026\004\016\005\026" +
    "\006\023\007\034\010\017\011\032\012\031\014\033\015" +
    "\014\021\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\157\001\001\000\004\020\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\167\001\001\000\002\001\001\000\004\024\171\001" +
    "\001\000\004\003\172\001\001\000\026\004\016\005\026" +
    "\006\023\007\034\010\017\011\032\012\031\014\033\015" +
    "\014\021\015\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder(">> Erro de Sintaxe");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) m.append(" na linha "+(s.left+1)+", coluna "+(s.right+1));
        }
        m.append(": ").append(message);
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) { report_error(message, info); throw new RuntimeException("Erro Fatal"); }
    private StringBuilder mainCode = new StringBuilder(), functionsCode = new StringBuilder();
    private boolean parsingFunction = false; 
    class TabelaSimbolo {
        String tipo; boolean ehVetor;
        TabelaSimbolo(String t, boolean v) { this.tipo = t; this.ehVetor = v; }
        public String getTipo() { return tipo; }
        public boolean getEhVetor() { return ehVetor; }
    }
    private Hashtable<String, TabelaSimbolo> dicionario = new Hashtable<>();
    private Deque<String> pilhaAuxiliar = new ArrayDeque<>();
    private int indent_level = 1;
    private StringBuilder getBuffer() { return parsingFunction ? functionsCode : mainCode; }
    private void indent() { for(int i=0; i<indent_level*4; i++) getBuffer().append(" "); }
    public void emit_final_code() {
        System.out.println("#include <stdio.h>\n#include <stdlib.h>\n");
        System.out.print(functionsCode.toString());
        System.out.println("int main() {");
        System.out.print(mainCode.toString());
        System.out.println("    return 0;\n}");
    }
    public void checarVariavelNaoDeclarada(String id) {
        if (id == null || id.matches("-?\\d+(\\.\\d+)?") || id.startsWith("\"")) return;
        String idBase = id.contains("[") ? id.substring(0, id.indexOf('[')) : id;
        if (!dicionario.containsKey(idBase)) report_fatal_error("Variavel '" + idBase + "' nao declarada.", null);
    }
    public void checarUsoCorretoVetores(String id) {
        if (id == null || id.matches("-?\\d+(\\.\\d+)?") || id.startsWith("\"")) return;
        checarVariavelNaoDeclarada(id);
        String idBase = id.contains("[") ? id.substring(0, id.indexOf('[')) : id;
        TabelaSimbolo t1 = dicionario.get(idBase);
        if (t1.getEhVetor() && !id.contains("[")) report_fatal_error("Variavel '" + id + "' e um vetor e precisa de indice.", null);
        if (!t1.getEhVetor() && id.contains("[")) report_fatal_error("Variavel '" + id + "' nao e um vetor.", null);
    }
    // Cole esta vers??o corrigida no lugar da sua fun????o checkExpr antiga
public String checkExpr(String e1, String e2) {
    String tipoE1 = "", tipoE2 = "";

    // Processa o primeiro operando, se ele n??o for nulo
    if (e1 != null) {
        checarUsoCorretoVetores(e1);
        String e1Base = e1.contains("[") ? e1.substring(0, e1.indexOf('[')) : e1;
        if (dicionario.containsKey(e1Base)) {
            tipoE1 = dicionario.get(e1Base).getTipo();
        } else if (e1.matches("-?\\d+")) {
            tipoE1 = "INT";
        } else if (e1.matches("-?\\d+\\.\\d+")) {
            tipoE1 = "FLOAT";
        }
    }

    // Processa o segundo operando, se ele n??o for nulo
    if (e2 != null) {
        checarUsoCorretoVetores(e2);
        String e2Base = e2.contains("[") ? e2.substring(0, e2.indexOf('[')) : e2;
        if (dicionario.containsKey(e2Base)) {
            tipoE2 = dicionario.get(e2Base).getTipo();
        } else if (e2.matches("-?\\d+")) {
            tipoE2 = "INT";
        } else if (e2.matches("-?\\d+\\.\\d+")) {
            tipoE2 = "FLOAT";
        }
    }
    
    // Compara os tipos apenas se ambos existirem
    if (!tipoE1.isEmpty() && !tipoE2.isEmpty() && !tipoE1.equals(tipoE2)) {
        report_fatal_error("Tipos incompativeis na expressao: " + tipoE1 + " e " + tipoE2, null);
    }
    
    return !tipoE1.isEmpty() ? tipoE1 : tipoE2;
}   
    public void emit_declaracao(String id, String tipo, String valor) {
        indent(); if(dicionario.containsKey(id)) report_fatal_error("Variavel duplicada [" + id + "]",null);
        dicionario.put(id, new TabelaSimbolo(tipo, false));
        getBuffer().append(tipo.equalsIgnoreCase("INT") ? "int " : "float ").append(id);
        if (valor != null) getBuffer().append(" = ").append(valor); getBuffer().append(";\n");
    }
    public void emit_declaracao_vetor(String tipo, String id, String tamanho) {
        indent(); if(dicionario.containsKey(id)) report_fatal_error("Variavel duplicada [" + id + "]", null);
        dicionario.put(id, new TabelaSimbolo(tipo, true));
        getBuffer().append(tipo.equalsIgnoreCase("INT") ? "int " : "float ").append(id).append("[").append(tamanho).append("];\n");
    }
    public void emit_atribuicao(String id, String valor){ checarUsoCorretoVetores(id); indent(); getBuffer().append(id).append(" = ").append(valor).append(";\n"); }
    public void emit_leia(String id){
        checarUsoCorretoVetores(id); indent(); TabelaSimbolo t1 = dicionario.get(id.contains("[") ? id.substring(0, id.indexOf('[')) : id);
        getBuffer().append("scanf(").append(t1.getTipo().equals("INT") ? "\"%d\"" : "\"%f\"").append(", &").append(id).append(");\n");
    }
    public void emit_escreva(String content, boolean newline) {
        indent();
        if (content.startsWith("\"")) { getBuffer().append("printf(").append(content).append(newline ? ", \"\\n\"" : "").append(");\n");
        } else {
            String tipo = checkExpr(content, null); String format = tipo.equals("INT") ? "%d" : "%f"; if (newline) format += "\\n";
            getBuffer().append("printf(\"").append(format).append("\", ").append(content).append(");\n");
        }
    }
    public void emit_bloco_inicio() { indent(); getBuffer().append("{\n"); indent_level++; }
    public void emit_bloco_fim() { indent_level--; indent(); getBuffer().append("}\n"); }
    public void emit_if(String cond) { indent(); getBuffer().append("if (").append(cond).append(")\n"); }
    public void emit_else() { indent_level--; indent(); getBuffer().append("} else\n"); }
    public void emit_while(String cond) { indent(); getBuffer().append("while (").append(cond).append(")\n"); }
    public void emit_for(String id, String de, String ate, String passo) {
        indent(); checarVariavelNaoDeclarada(id); boolean neg = false; try { if (Integer.parseInt(passo) < 0) neg = true; } catch (Exception e) {}
        getBuffer().append("for (").append(id).append(" = ").append(de).append("; ").append(id).append(neg ? " >= " : " <= ").append(ate).append("; ").append(id).append(" += ").append(passo).append(")\n");
    }
    public void emit_function_header(String tipo, String id) { functionsCode.append("\n").append(tipo.equalsIgnoreCase("INT") ? "int " : "float ").append(id).append("() \n"); }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= list_proc_declaration PROGRAM STARTPRG list_command ENDPRG 
            {
              Object RESULT =null;
		 emit_final_code(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_proc_declaration ::= list_proc_declaration proc_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_proc_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_proc_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_proc_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parsingFunction = true; emit_function_header(t, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 emit_bloco_inicio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_declaration ::= PROCEDIMENTO tipo ID LPAREN RPAREN NT$0 STARTPRG NT$1 list_command ENDPRG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 emit_bloco_fim(); parsingFunction = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_declaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_command ::= list_command command 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_command ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= declare_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= readl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= writel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= writeln 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= DECLINT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "INT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= DECLFLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declare_variable ::= tipo ID SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_declaracao(id, t, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declare_variable ::= tipo ID ATTRIB expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_declaracao(id, t, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declare_variable ::= tipo vetor SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String id = pilhaAuxiliar.pop(); String tam = pilhaAuxiliar.pop(); emit_declaracao_vetor(t, id, tam); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vetor ::= ID LBRCKT expr RBRCKT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign ::= ID ATTRIB expr SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_atribuicao(id, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign ::= ID LBRCKT expr RBRCKT ATTRIB expr SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String idx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_atribuicao(i+"["+idx+"]", v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // readl ::= READLINE expr SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_leia(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // writel ::= WRITELINE expr SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_escreva(v, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // writel ::= WRITELINE STRING_LITERAL SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_escreva("\"" + s + "\"", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // writeln ::= WRITELN expr SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_escreva(v, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // writeln ::= WRITELN STRING_LITERAL SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_escreva("\"" + s + "\"", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_if(cond);  emit_bloco_inicio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_stmt ::= IFF expr THENN NT$2 list_command else_part ENDELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
 emit_else(); emit_bloco_inicio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // else_part ::= ELSEE NT$3 list_command 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 emit_bloco_fim(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // else_part ::= 
            {
              Object RESULT =null;
		 emit_bloco_fim(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_for(id, d, a, p);  emit_bloco_inicio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for_stmt ::= PARA ID DE expr ATE expr PASSO expr FACA NT$4 list_command FIMPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 emit_bloco_fim(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$5 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_while(cond);  emit_bloco_inicio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_stmt ::= ENQUANTO expr FACA NT$5 list_command FIMENQUANTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 emit_bloco_fim(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " + " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " - " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " * " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " / " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr EQUALS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " == " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr GREATER expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " > " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr LESS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " < " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr E expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " && " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr OU expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + " || " + e2; checkExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NAO expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!" + e1; checkExpr(e1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-" + e1; checkExpr(e1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LPAREN expr RPAREN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(" + e1 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= ID LBRCKT expr RBRCKT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i + "[" + idx + "]"; checkExpr(RESULT, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; checkExpr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= INTT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= FLOATT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
